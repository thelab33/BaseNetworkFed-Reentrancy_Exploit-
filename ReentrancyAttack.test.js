const VulnerableContract = artifacts.require("VulnerableContract");
const AttackerContract = artifacts.require("AttackerContract");

contract("Reentrancy Attack", (accounts) => {
    let vulnerableContract;
    let attackerContract;

    beforeEach(async () => {
        vulnerableContract = await VulnerableContract.new();
        attackerContract = await AttackerContract.new(vulnerableContract.address);

        console.log("Vulnerable contract address:", vulnerableContract.address);
        console.log("Attacker contract address:", attackerContract.address);

        // Deposit some ether into the vulnerable contract
        await vulnerableContract.deposit({ value: web3.utils.toWei("10", "ether"), from: accounts[0] });

        const vulnerableBalance = await web3.eth.getBalance(vulnerableContract.address);
        console.log("Vulnerable contract balance after deposit:", vulnerableBalance);
    });

    it("should simulate a reentrancy attack", async () => {
        const attackAmount = web3.utils.toWei("1", "ether");

        // Balance before attack
        const initialAttackerBalance = await web3.eth.getBalance(attackerContract.address);
        const initialVulnerableBalance = await web3.eth.getBalance(vulnerableContract.address);
        console.log("Initial attacker contract balance:", initialAttackerBalance);
        console.log("Initial vulnerable contract balance:", initialVulnerableBalance);

        try {
            // Attack the vulnerable contract
            await attackerContract.attack({ value: attackAmount, from: accounts[1] });

            // Balance after attack
            const finalAttackerBalance = await web3.eth.getBalance(attackerContract.address);
            const finalVulnerableBalance = await web3.eth.getBalance(vulnerableContract.address);
            console.log("Final attacker contract balance:", finalAttackerBalance);
            console.log("Final vulnerable contract balance:", finalVulnerableBalance);

            // Assertions
            assert.strictEqual(finalVulnerableBalance, "0", "Vulnerable contract should be empty");
            assert(finalAttackerBalance > initialAttackerBalance, "Attacker contract should have more funds");
        } catch (error) {
            console.error("Attack failed:", error.message);
            assert.fail("Reentrancy attack simulation failed.");
        }
    });
});
